//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DotNetLisp.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetLisp.Antlr.Generated {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class DotNetLispParser : Parser {
	public const int
		T__0=1, T__1=2, STRING=3, LONG=4, SYMBOL=5, TRASH=6;
	public const int
		RULE_file = 0, RULE_form = 1, RULE_forms = 2, RULE_list = 3, RULE_literal = 4, 
		RULE_string = 5, RULE_number = 6, RULE_symbol = 7;
	public static readonly string[] ruleNames = {
		"file", "form", "forms", "list", "literal", "string", "number", "symbol"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "STRING", "LONG", "SYMBOL", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotNetLisp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DotNetLispParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << STRING) | (1L << LONG) | (1L << SYMBOL))) != 0)) {
				{
				{
				State = 16; form();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 2, RULE_form);
		try {
			State = 24;
			switch (TokenStream.La(1)) {
			case STRING:
			case LONG:
			case SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 22; literal();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23; list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormsContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FormsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forms; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterForms(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitForms(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormsContext forms() {
		FormsContext _localctx = new FormsContext(Context, State);
		EnterRule(_localctx, 4, RULE_forms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << STRING) | (1L << LONG) | (1L << SYMBOL))) != 0)) {
				{
				{
				State = 26; form();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public FormsContext forms() {
			return GetRuleContext<FormsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 6, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(T__0);
			State = 33; forms();
			State = 34; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_literal);
		try {
			State = 39;
			switch (TokenStream.La(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; @string();
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; number();
				}
				break;
			case SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(DotNetLispParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 10, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode LONG() { return GetToken(DotNetLispParser.LONG, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(LONG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode SYMBOL() { return GetToken(DotNetLispParser.SYMBOL, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\b\x32");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x3\x2\a\x2\x14\n\x2\f\x2\xE\x2\x17\v");
		sb.Append("\x2\x3\x3\x3\x3\x5\x3\x1B\n\x3\x3\x4\a\x4\x1E\n\x4\f\x4\xE\x4");
		sb.Append("!\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x5\x6*\n\x6");
		sb.Append("\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x2\x2\n\x2\x4\x6\b\n\f\xE");
		sb.Append("\x10\x2\x2.\x2\x15\x3\x2\x2\x2\x4\x1A\x3\x2\x2\x2\x6\x1F\x3");
		sb.Append("\x2\x2\x2\b\"\x3\x2\x2\x2\n)\x3\x2\x2\x2\f+\x3\x2\x2\x2\xE-");
		sb.Append("\x3\x2\x2\x2\x10/\x3\x2\x2\x2\x12\x14\x5\x4\x3\x2\x13\x12\x3");
		sb.Append("\x2\x2\x2\x14\x17\x3\x2\x2\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3");
		sb.Append("\x2\x2\x2\x16\x3\x3\x2\x2\x2\x17\x15\x3\x2\x2\x2\x18\x1B\x5");
		sb.Append("\n\x6\x2\x19\x1B\x5\b\x5\x2\x1A\x18\x3\x2\x2\x2\x1A\x19\x3\x2");
		sb.Append("\x2\x2\x1B\x5\x3\x2\x2\x2\x1C\x1E\x5\x4\x3\x2\x1D\x1C\x3\x2");
		sb.Append("\x2\x2\x1E!\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2");
		sb.Append(" \a\x3\x2\x2\x2!\x1F\x3\x2\x2\x2\"#\a\x3\x2\x2#$\x5\x6\x4\x2");
		sb.Append("$%\a\x4\x2\x2%\t\x3\x2\x2\x2&*\x5\f\a\x2\'*\x5\xE\b\x2(*\x5");
		sb.Append("\x10\t\x2)&\x3\x2\x2\x2)\'\x3\x2\x2\x2)(\x3\x2\x2\x2*\v\x3\x2");
		sb.Append("\x2\x2+,\a\x5\x2\x2,\r\x3\x2\x2\x2-.\a\x6\x2\x2.\xF\x3\x2\x2");
		sb.Append("\x2/\x30\a\a\x2\x2\x30\x11\x3\x2\x2\x2\x6\x15\x1A\x1F)");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DotNetLisp.Antlr.Generated
