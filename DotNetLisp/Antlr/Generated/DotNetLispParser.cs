//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DotNetLisp.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetLisp.Antlr.Generated {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class DotNetLispParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, STRING=8, LONG=9, 
		SYMBOL=10, TYPE=11, TRASH=12;
	public const int
		RULE_file = 0, RULE_forms = 1, RULE_form = 2, RULE_list = 3, RULE_dictionary = 4, 
		RULE_set = 5, RULE_vector = 6, RULE_literal = 7, RULE_string = 8, RULE_number = 9, 
		RULE_symbol = 10, RULE_type = 11;
	public static readonly string[] ruleNames = {
		"file", "forms", "form", "list", "dictionary", "set", "vector", "literal", 
		"string", "number", "symbol", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'|'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "STRING", "LONG", "SYMBOL", 
		"TYPE", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotNetLisp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DotNetLispParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << STRING) | (1L << LONG) | (1L << SYMBOL) | (1L << TYPE))) != 0)) {
				{
				{
				State = 24; form();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormsContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FormsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forms; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterForms(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitForms(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormsContext forms() {
		FormsContext _localctx = new FormsContext(Context, State);
		EnterRule(_localctx, 2, RULE_forms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << STRING) | (1L << LONG) | (1L << SYMBOL) | (1L << TYPE))) != 0)) {
				{
				{
				State = 30; form();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public VectorContext vector() {
			return GetRuleContext<VectorContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public DictionaryContext dictionary() {
			return GetRuleContext<DictionaryContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 4, RULE_form);
		try {
			State = 41;
			switch (TokenStream.La(1)) {
			case STRING:
			case LONG:
			case SYMBOL:
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; literal();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; list();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; vector();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; set();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 5);
				{
				State = 40; dictionary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public FormsContext forms() {
			return GetRuleContext<FormsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 6, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(T__0);
			State = 44; forms();
			State = 45; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public DictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterDictionary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitDictionary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryContext dictionary() {
		DictionaryContext _localctx = new DictionaryContext(Context, State);
		EnterRule(_localctx, 8, RULE_dictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(T__2);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << STRING) | (1L << LONG) | (1L << SYMBOL) | (1L << TYPE))) != 0)) {
				{
				{
				State = 48; form();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 54; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 10, RULE_set);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(T__4);
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 57; form();
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 63; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorContext : ParserRuleContext {
		public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public VectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterVector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitVector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorContext vector() {
		VectorContext _localctx = new VectorContext(Context, State);
		EnterRule(_localctx, 12, RULE_vector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(T__5);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << STRING) | (1L << LONG) | (1L << SYMBOL) | (1L << TYPE))) != 0)) {
				{
				{
				State = 66; form();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 72; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			State = 78;
			switch (TokenStream.La(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; @string();
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; number();
				}
				break;
			case SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; symbol();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77; type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(DotNetLispParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode LONG() { return GetToken(DotNetLispParser.LONG, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 18, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(LONG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode SYMBOL() { return GetToken(DotNetLispParser.SYMBOL, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 20, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(DotNetLispParser.TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDotNetLispListener typedListener = listener as IDotNetLispListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDotNetLispVisitor<TResult> typedVisitor = visitor as IDotNetLispVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xE");
		sb.Append("[\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4");
		sb.Append("\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r");
		sb.Append("\x3\x2\a\x2\x1C\n\x2\f\x2\xE\x2\x1F\v\x2\x3\x3\a\x3\"\n\x3\f");
		sb.Append("\x3\xE\x3%\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4,\n\x4\x3");
		sb.Append("\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x34\n\x6\f\x6\xE\x6\x37");
		sb.Append("\v\x6\x3\x6\x3\x6\x3\a\x3\a\a\a=\n\a\f\a\xE\a@\v\a\x3\a\x3\a");
		sb.Append("\x3\b\x3\b\a\b\x46\n\b\f\b\xE\bI\v\b\x3\b\x3\b\x3\t\x3\t\x3");
		sb.Append("\t\x3\t\x5\tQ\n\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3");
		sb.Append("\r\x2\x2\xE\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x2\x2Z\x2");
		sb.Append("\x1D\x3\x2\x2\x2\x4#\x3\x2\x2\x2\x6+\x3\x2\x2\x2\b-\x3\x2\x2");
		sb.Append("\x2\n\x31\x3\x2\x2\x2\f:\x3\x2\x2\x2\xE\x43\x3\x2\x2\x2\x10");
		sb.Append("P\x3\x2\x2\x2\x12R\x3\x2\x2\x2\x14T\x3\x2\x2\x2\x16V\x3\x2\x2");
		sb.Append("\x2\x18X\x3\x2\x2\x2\x1A\x1C\x5\x6\x4\x2\x1B\x1A\x3\x2\x2\x2");
		sb.Append("\x1C\x1F\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2");
		sb.Append("\x1E\x3\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2 \"\x5\x6\x4\x2! \x3");
		sb.Append("\x2\x2\x2\"%\x3\x2\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$\x5\x3");
		sb.Append("\x2\x2\x2%#\x3\x2\x2\x2&,\x5\x10\t\x2\',\x5\b\x5\x2(,\x5\xE");
		sb.Append("\b\x2),\x5\f\a\x2*,\x5\n\x6\x2+&\x3\x2\x2\x2+\'\x3\x2\x2\x2");
		sb.Append("+(\x3\x2\x2\x2+)\x3\x2\x2\x2+*\x3\x2\x2\x2,\a\x3\x2\x2\x2-.");
		sb.Append("\a\x3\x2\x2./\x5\x4\x3\x2/\x30\a\x4\x2\x2\x30\t\x3\x2\x2\x2");
		sb.Append("\x31\x35\a\x5\x2\x2\x32\x34\x5\x6\x4\x2\x33\x32\x3\x2\x2\x2");
		sb.Append("\x34\x37\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2");
		sb.Append("\x36\x38\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x38\x39\a\x6\x2\x2");
		sb.Append("\x39\v\x3\x2\x2\x2:>\a\a\x2\x2;=\x5\x6\x4\x2<;\x3\x2\x2\x2=");
		sb.Append("@\x3\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\x41\x3\x2\x2\x2@");
		sb.Append(">\x3\x2\x2\x2\x41\x42\a\a\x2\x2\x42\r\x3\x2\x2\x2\x43G\a\b\x2");
		sb.Append("\x2\x44\x46\x5\x6\x4\x2\x45\x44\x3\x2\x2\x2\x46I\x3\x2\x2\x2");
		sb.Append("G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\x3\x2\x2\x2IG\x3\x2\x2\x2");
		sb.Append("JK\a\t\x2\x2K\xF\x3\x2\x2\x2LQ\x5\x12\n\x2MQ\x5\x14\v\x2NQ\x5");
		sb.Append("\x16\f\x2OQ\x5\x18\r\x2PL\x3\x2\x2\x2PM\x3\x2\x2\x2PN\x3\x2");
		sb.Append("\x2\x2PO\x3\x2\x2\x2Q\x11\x3\x2\x2\x2RS\a\n\x2\x2S\x13\x3\x2");
		sb.Append("\x2\x2TU\a\v\x2\x2U\x15\x3\x2\x2\x2VW\a\f\x2\x2W\x17\x3\x2\x2");
		sb.Append("\x2XY\a\r\x2\x2Y\x19\x3\x2\x2\x2\t\x1D#+\x35>GP");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DotNetLisp.Antlr.Generated
