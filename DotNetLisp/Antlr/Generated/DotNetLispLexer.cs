//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DotNetLisp.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetLisp.Antlr.Generated {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class DotNetLispLexer : Lexer {
	public const int
		T__0=1, T__1=2, STRING=3, LONG=4, SYMBOL=5, TRASH=6;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "STRING", "LONG", "SYMBOL", "WS", "COMMENT", "TRASH"
	};


	public DotNetLispLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "STRING", "LONG", "SYMBOL", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotNetLisp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\b\x41");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\a\x4\x1C\n\x4\f\x4\xE\x4\x1F\v\x4\x3\x4\x3\x4");
		sb.Append("\x3\x5\x5\x5$\n\x5\x3\x5\x6\x5\'\n\x5\r\x5\xE\x5(\x3\x5\x5\x5");
		sb.Append(",\n\x5\x3\x6\x6\x6/\n\x6\r\x6\xE\x6\x30\x3\a\x3\a\x3\b\x3\b");
		sb.Append("\a\b\x37\n\b\f\b\xE\b:\v\b\x3\t\x3\t\x5\t>\n\t\x3\t\x3\t\x2");
		sb.Append("\x2\n\x3\x3\x5\x4\a\x5\t\x6\v\a\r\x2\xF\x2\x11\b\x3\x2\b\x3");
		sb.Append("\x2$$\x3\x2\x32;\x4\x2NNnn\x5\x2--\x43\\\x63|\a\x2\v\f\xF\xF");
		sb.Append("\"\"..^^\x4\x2\f\f\xF\xF\x46\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2");
		sb.Append("\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\x11");
		sb.Append("\x3\x2\x2\x2\x3\x13\x3\x2\x2\x2\x5\x15\x3\x2\x2\x2\a\x17\x3");
		sb.Append("\x2\x2\x2\t#\x3\x2\x2\x2\v.\x3\x2\x2\x2\r\x32\x3\x2\x2\x2\xF");
		sb.Append("\x34\x3\x2\x2\x2\x11=\x3\x2\x2\x2\x13\x14\a*\x2\x2\x14\x4\x3");
		sb.Append("\x2\x2\x2\x15\x16\a+\x2\x2\x16\x6\x3\x2\x2\x2\x17\x1D\a$\x2");
		sb.Append("\x2\x18\x1C\n\x2\x2\x2\x19\x1A\a^\x2\x2\x1A\x1C\a$\x2\x2\x1B");
		sb.Append("\x18\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1C\x1F\x3\x2\x2\x2\x1D");
		sb.Append("\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E \x3\x2\x2\x2\x1F\x1D");
		sb.Append("\x3\x2\x2\x2 !\a$\x2\x2!\b\x3\x2\x2\x2\"$\a/\x2\x2#\"\x3\x2");
		sb.Append("\x2\x2#$\x3\x2\x2\x2$&\x3\x2\x2\x2%\'\t\x3\x2\x2&%\x3\x2\x2");
		sb.Append("\x2\'(\x3\x2\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2\x2)+\x3\x2\x2\x2");
		sb.Append("*,\t\x4\x2\x2+*\x3\x2\x2\x2+,\x3\x2\x2\x2,\n\x3\x2\x2\x2-/\t");
		sb.Append("\x5\x2\x2.-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x30");
		sb.Append("\x31\x3\x2\x2\x2\x31\f\x3\x2\x2\x2\x32\x33\t\x6\x2\x2\x33\xE");
		sb.Append("\x3\x2\x2\x2\x34\x38\a=\x2\x2\x35\x37\n\a\x2\x2\x36\x35\x3\x2");
		sb.Append("\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2");
		sb.Append("\x2\x39\x10\x3\x2\x2\x2:\x38\x3\x2\x2\x2;>\x5\r\a\x2<>\x5\xF");
		sb.Append("\b\x2=;\x3\x2\x2\x2=<\x3\x2\x2\x2>?\x3\x2\x2\x2?@\b\t\x2\x2");
		sb.Append("@\x12\x3\x2\x2\x2\v\x2\x1B\x1D#(+\x30\x38=\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DotNetLisp.Antlr.Generated
