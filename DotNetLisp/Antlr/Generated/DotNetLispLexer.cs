//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DotNetLisp.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetLisp.Antlr.Generated {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class DotNetLispLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, LAMBDA_PARAMETER=9, 
		STRING=10, LONG=11, SYMBOL=12, TYPE=13, TRASH=14;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "LAMBDA_PARAMETER", 
		"STRING", "LONG", "SYMBOL", "TYPE", "WS", "COMMENT", "TRASH"
	};


	public DotNetLispLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'|'", "'['", "']'", "'\\('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "LAMBDA_PARAMETER", 
		"STRING", "LONG", "SYMBOL", "TYPE", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotNetLisp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x10");
		sb.Append("o\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3\x2\x3");
		sb.Append("\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3");
		sb.Append("\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x6\n\x37\n\n\r\n\xE\n");
		sb.Append("\x38\x3\v\x3\v\x3\v\x3\v\a\v?\n\v\f\v\xE\v\x42\v\v\x3\v\x3\v");
		sb.Append("\x3\f\x5\fG\n\f\x3\f\x6\fJ\n\f\r\f\xE\fK\x3\f\x5\fO\n\f\x3\r");
		sb.Append("\x6\rR\n\r\r\r\xE\rS\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x6\xE[\n");
		sb.Append("\xE\r\xE\xE\xE\\\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10");
		sb.Append("\x65\n\x10\f\x10\xE\x10h\v\x10\x3\x11\x3\x11\x5\x11l\n\x11\x3");
		sb.Append("\x11\x3\x11\x2\x2\x12\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11");
		sb.Append("\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x2\x1F\x2!\x10\x3\x2");
		sb.Append("\t\x3\x2\x32;\x3\x2$$\x4\x2NNnn\a\x2,-\x30\x30\x32;\x43\\\x63");
		sb.Append("|\x6\x2..>>\x43\\\x63|\a\x2\v\f\xF\xF\"\"..^^\x4\x2\f\f\xF\xF");
		sb.Append("x\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t");
		sb.Append("\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2");
		sb.Append("\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2");
		sb.Append("\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2");
		sb.Append("!\x3\x2\x2\x2\x3#\x3\x2\x2\x2\x5%\x3\x2\x2\x2\a\'\x3\x2\x2\x2");
		sb.Append("\t)\x3\x2\x2\x2\v+\x3\x2\x2\x2\r-\x3\x2\x2\x2\xF/\x3\x2\x2\x2");
		sb.Append("\x11\x31\x3\x2\x2\x2\x13\x34\x3\x2\x2\x2\x15:\x3\x2\x2\x2\x17");
		sb.Append("\x46\x3\x2\x2\x2\x19Q\x3\x2\x2\x2\x1BU\x3\x2\x2\x2\x1D^\x3\x2");
		sb.Append("\x2\x2\x1F`\x3\x2\x2\x2!k\x3\x2\x2\x2#$\a*\x2\x2$\x4\x3\x2\x2");
		sb.Append("\x2%&\a+\x2\x2&\x6\x3\x2\x2\x2\'(\a}\x2\x2(\b\x3\x2\x2\x2)*");
		sb.Append("\a\x7F\x2\x2*\n\x3\x2\x2\x2+,\a~\x2\x2,\f\x3\x2\x2\x2-.\a]\x2");
		sb.Append("\x2.\xE\x3\x2\x2\x2/\x30\a_\x2\x2\x30\x10\x3\x2\x2\x2\x31\x32");
		sb.Append("\a^\x2\x2\x32\x33\a*\x2\x2\x33\x12\x3\x2\x2\x2\x34\x36\a`\x2");
		sb.Append("\x2\x35\x37\t\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2");
		sb.Append("\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x14\x3\x2\x2");
		sb.Append("\x2:@\a$\x2\x2;?\n\x3\x2\x2<=\a^\x2\x2=?\a$\x2\x2>;\x3\x2\x2");
		sb.Append("\x2><\x3\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2");
		sb.Append("\x2\x2\x41\x43\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x43\x44\a$\x2\x2");
		sb.Append("\x44\x16\x3\x2\x2\x2\x45G\a/\x2\x2\x46\x45\x3\x2\x2\x2\x46G");
		sb.Append("\x3\x2\x2\x2GI\x3\x2\x2\x2HJ\t\x2\x2\x2IH\x3\x2\x2\x2JK\x3\x2");
		sb.Append("\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2LN\x3\x2\x2\x2MO\t\x4\x2\x2");
		sb.Append("NM\x3\x2\x2\x2NO\x3\x2\x2\x2O\x18\x3\x2\x2\x2PR\t\x5\x2\x2Q");
		sb.Append("P\x3\x2\x2\x2RS\x3\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2T\x1A");
		sb.Append("\x3\x2\x2\x2UZ\a<\x2\x2V[\t\x6\x2\x2WX\a.\x2\x2X[\a\"\x2\x2");
		sb.Append("Y[\a@\x2\x2ZV\x3\x2\x2\x2ZW\x3\x2\x2\x2ZY\x3\x2\x2\x2[\\\x3");
		sb.Append("\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]\x1C\x3\x2\x2\x2^_\t");
		sb.Append("\a\x2\x2_\x1E\x3\x2\x2\x2`\x61\a\x31\x2\x2\x61\x62\a\x31\x2");
		sb.Append("\x2\x62\x66\x3\x2\x2\x2\x63\x65\n\b\x2\x2\x64\x63\x3\x2\x2\x2");
		sb.Append("\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g \x3");
		sb.Append("\x2\x2\x2h\x66\x3\x2\x2\x2il\x5\x1D\xF\x2jl\x5\x1F\x10\x2ki");
		sb.Append("\x3\x2\x2\x2kj\x3\x2\x2\x2lm\x3\x2\x2\x2mn\b\x11\x2\x2n\"\x3");
		sb.Append("\x2\x2\x2\xE\x2\x38>@\x46KNSZ\\\x66k\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DotNetLisp.Antlr.Generated
