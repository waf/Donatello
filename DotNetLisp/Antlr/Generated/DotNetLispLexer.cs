//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DotNetLisp.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetLisp.Antlr.Generated {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class DotNetLispLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, LAMBDA_PARAMETER=9, 
		STRING=10, LONG=11, SYMBOL=12, TYPE=13, TRASH=14;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "LAMBDA_PARAMETER", 
		"STRING", "LONG", "SYMBOL", "TYPE", "WS", "COMMENT", "TRASH"
	};


	public DotNetLispLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'|'", "'['", "']'", "'\\('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "LAMBDA_PARAMETER", 
		"STRING", "LONG", "SYMBOL", "TYPE", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotNetLisp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x10");
		sb.Append("r\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3\x2\x3");
		sb.Append("\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3");
		sb.Append("\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3\n\x6\n\x37\n\n\r\n\xE\n");
		sb.Append("\x38\x3\v\x3\v\x3\v\x3\v\a\v?\n\v\f\v\xE\v\x42\v\v\x3\v\x3\v");
		sb.Append("\x3\f\x5\fG\n\f\x3\f\x6\fJ\n\f\r\f\xE\fK\x3\f\x5\fO\n\f\x3\r");
		sb.Append("\x3\r\x3\r\x3\r\x6\rU\n\r\r\r\xE\rV\x3\xE\x3\xE\x3\xE\x3\xE");
		sb.Append("\x3\xE\x6\xE^\n\xE\r\xE\xE\xE_\x3\xF\x3\xF\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\a\x10h\n\x10\f\x10\xE\x10k\v\x10\x3\x11\x3\x11\x5");
		sb.Append("\x11o\n\x11\x3\x11\x3\x11\x2\x2\x12\x3\x3\x5\x4\a\x5\t\x6\v");
		sb.Append("\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x2\x1F");
		sb.Append("\x2!\x10\x3\x2\n\x3\x2\x32;\x3\x2$$\x4\x2NNnn\a\x2-\x30\x32");
		sb.Append(";>>\x43\\\x63|\x4\x2,,@@\x6\x2..>>\x43\\\x63|\a\x2\v\f\xF\xF");
		sb.Append("\"\"..^^\x4\x2\f\f\xF\xF}\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2");
		sb.Append("\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3");
		sb.Append("\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2");
		sb.Append("\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2");
		sb.Append("\x2\x2\x1B\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x3#\x3\x2\x2\x2\x5%\x3");
		sb.Append("\x2\x2\x2\a\'\x3\x2\x2\x2\t)\x3\x2\x2\x2\v+\x3\x2\x2\x2\r-\x3");
		sb.Append("\x2\x2\x2\xF/\x3\x2\x2\x2\x11\x31\x3\x2\x2\x2\x13\x34\x3\x2");
		sb.Append("\x2\x2\x15:\x3\x2\x2\x2\x17\x46\x3\x2\x2\x2\x19T\x3\x2\x2\x2");
		sb.Append("\x1BX\x3\x2\x2\x2\x1D\x61\x3\x2\x2\x2\x1F\x63\x3\x2\x2\x2!n");
		sb.Append("\x3\x2\x2\x2#$\a*\x2\x2$\x4\x3\x2\x2\x2%&\a+\x2\x2&\x6\x3\x2");
		sb.Append("\x2\x2\'(\a}\x2\x2(\b\x3\x2\x2\x2)*\a\x7F\x2\x2*\n\x3\x2\x2");
		sb.Append("\x2+,\a~\x2\x2,\f\x3\x2\x2\x2-.\a]\x2\x2.\xE\x3\x2\x2\x2/\x30");
		sb.Append("\a_\x2\x2\x30\x10\x3\x2\x2\x2\x31\x32\a^\x2\x2\x32\x33\a*\x2");
		sb.Append("\x2\x33\x12\x3\x2\x2\x2\x34\x36\a`\x2\x2\x35\x37\t\x2\x2\x2");
		sb.Append("\x36\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2");
		sb.Append("\x38\x39\x3\x2\x2\x2\x39\x14\x3\x2\x2\x2:@\a$\x2\x2;?\n\x3\x2");
		sb.Append("\x2<=\a^\x2\x2=?\a$\x2\x2>;\x3\x2\x2\x2><\x3\x2\x2\x2?\x42\x3");
		sb.Append("\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x43\x3\x2\x2\x2");
		sb.Append("\x42@\x3\x2\x2\x2\x43\x44\a$\x2\x2\x44\x16\x3\x2\x2\x2\x45G");
		sb.Append("\a/\x2\x2\x46\x45\x3\x2\x2\x2\x46G\x3\x2\x2\x2GI\x3\x2\x2\x2");
		sb.Append("HJ\t\x2\x2\x2IH\x3\x2\x2\x2JK\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3");
		sb.Append("\x2\x2\x2LN\x3\x2\x2\x2MO\t\x4\x2\x2NM\x3\x2\x2\x2NO\x3\x2\x2");
		sb.Append("\x2O\x18\x3\x2\x2\x2PU\t\x5\x2\x2QR\a.\x2\x2RU\a\"\x2\x2SU\t");
		sb.Append("\x6\x2\x2TP\x3\x2\x2\x2TQ\x3\x2\x2\x2TS\x3\x2\x2\x2UV\x3\x2");
		sb.Append("\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2\x2W\x1A\x3\x2\x2\x2X]\a<\x2");
		sb.Append("\x2Y^\t\a\x2\x2Z[\a.\x2\x2[^\a\"\x2\x2\\^\a@\x2\x2]Y\x3\x2\x2");
		sb.Append("\x2]Z\x3\x2\x2\x2]\\\x3\x2\x2\x2^_\x3\x2\x2\x2_]\x3\x2\x2\x2");
		sb.Append("_`\x3\x2\x2\x2`\x1C\x3\x2\x2\x2\x61\x62\t\b\x2\x2\x62\x1E\x3");
		sb.Append("\x2\x2\x2\x63\x64\a\x31\x2\x2\x64\x65\a\x31\x2\x2\x65i\x3\x2");
		sb.Append("\x2\x2\x66h\n\t\x2\x2g\x66\x3\x2\x2\x2hk\x3\x2\x2\x2ig\x3\x2");
		sb.Append("\x2\x2ij\x3\x2\x2\x2j \x3\x2\x2\x2ki\x3\x2\x2\x2lo\x5\x1D\xF");
		sb.Append("\x2mo\x5\x1F\x10\x2nl\x3\x2\x2\x2nm\x3\x2\x2\x2op\x3\x2\x2\x2");
		sb.Append("pq\b\x11\x2\x2q\"\x3\x2\x2\x2\xF\x2\x38>@\x46KNTV]_in\x3\x2");
		sb.Append("\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DotNetLisp.Antlr.Generated
