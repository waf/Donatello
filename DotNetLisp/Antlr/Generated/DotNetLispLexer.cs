//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DotNetLisp.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetLisp.Antlr.Generated {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class DotNetLispLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, LAMBDA_PARAMETER=9, 
		STRING=10, LONG=11, METHOD_ACCESS=12, FIELD_ACCESS=13, SYMBOL=14, TYPE=15, 
		TRASH=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "LAMBDA_PARAMETER", 
		"STRING", "LONG", "METHOD_ACCESS", "FIELD_ACCESS", "SYMBOL", "TYPE", "WS", 
		"COMMENT", "TRASH"
	};


	public DotNetLispLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'|'", "'['", "']'", "'\\('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "LAMBDA_PARAMETER", 
		"STRING", "LONG", "METHOD_ACCESS", "FIELD_ACCESS", "SYMBOL", "TYPE", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotNetLisp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x12");
		sb.Append("|\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\n\x3");
		sb.Append("\n\x6\n;\n\n\r\n\xE\n<\x3\v\x3\v\x3\v\x3\v\a\v\x43\n\v\f\v\xE");
		sb.Append("\v\x46\v\v\x3\v\x3\v\x3\f\x5\fK\n\f\x3\f\x6\fN\n\f\r\f\xE\f");
		sb.Append("O\x3\f\x5\fS\n\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x6\xF_\n\xF\r\xF\xE\xF`\x3\x10\x3\x10\x3\x10\x3");
		sb.Append("\x10\x3\x10\x6\x10h\n\x10\r\x10\xE\x10i\x3\x11\x3\x11\x3\x12");
		sb.Append("\x3\x12\x3\x12\x3\x12\a\x12r\n\x12\f\x12\xE\x12u\v\x12\x3\x13");
		sb.Append("\x3\x13\x5\x13y\n\x13\x3\x13\x3\x13\x2\x2\x14\x3\x3\x5\x4\a");
		sb.Append("\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF");
		sb.Append("\x1D\x10\x1F\x11!\x2#\x2%\x12\x3\x2\n\x3\x2\x32;\x3\x2$$\x4");
		sb.Append("\x2NNnn\b\x2-.\x30\x30\x32;>>\x43\\\x63|\x4\x2,,@@\x6\x2..>");
		sb.Append(">\x43\\\x63|\a\x2\v\f\xF\xF\"\"..^^\x4\x2\f\f\xF\xF\x87\x2\x3");
		sb.Append("\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2");
		sb.Append("\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11");
		sb.Append("\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3");
		sb.Append("\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2");
		sb.Append("\x2\x2\x2\x1F\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x3\'\x3\x2\x2\x2\x5");
		sb.Append(")\x3\x2\x2\x2\a+\x3\x2\x2\x2\t-\x3\x2\x2\x2\v/\x3\x2\x2\x2\r");
		sb.Append("\x31\x3\x2\x2\x2\xF\x33\x3\x2\x2\x2\x11\x35\x3\x2\x2\x2\x13");
		sb.Append("\x38\x3\x2\x2\x2\x15>\x3\x2\x2\x2\x17J\x3\x2\x2\x2\x19T\x3\x2");
		sb.Append("\x2\x2\x1BW\x3\x2\x2\x2\x1D^\x3\x2\x2\x2\x1F\x62\x3\x2\x2\x2");
		sb.Append("!k\x3\x2\x2\x2#m\x3\x2\x2\x2%x\x3\x2\x2\x2\'(\a*\x2\x2(\x4\x3");
		sb.Append("\x2\x2\x2)*\a+\x2\x2*\x6\x3\x2\x2\x2+,\a}\x2\x2,\b\x3\x2\x2");
		sb.Append("\x2-.\a\x7F\x2\x2.\n\x3\x2\x2\x2/\x30\a~\x2\x2\x30\f\x3\x2\x2");
		sb.Append("\x2\x31\x32\a]\x2\x2\x32\xE\x3\x2\x2\x2\x33\x34\a_\x2\x2\x34");
		sb.Append("\x10\x3\x2\x2\x2\x35\x36\a^\x2\x2\x36\x37\a*\x2\x2\x37\x12\x3");
		sb.Append("\x2\x2\x2\x38:\a`\x2\x2\x39;\t\x2\x2\x2:\x39\x3\x2\x2\x2;<\x3");
		sb.Append("\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\x14\x3\x2\x2\x2>\x44");
		sb.Append("\a$\x2\x2?\x43\n\x3\x2\x2@\x41\a^\x2\x2\x41\x43\a$\x2\x2\x42");
		sb.Append("?\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3");
		sb.Append("\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45G\x3\x2\x2\x2\x46\x44\x3\x2");
		sb.Append("\x2\x2GH\a$\x2\x2H\x16\x3\x2\x2\x2IK\a/\x2\x2JI\x3\x2\x2\x2");
		sb.Append("JK\x3\x2\x2\x2KM\x3\x2\x2\x2LN\t\x2\x2\x2ML\x3\x2\x2\x2NO\x3");
		sb.Append("\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2PR\x3\x2\x2\x2QS\t\x4\x2");
		sb.Append("\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2S\x18\x3\x2\x2\x2TU\a\x30\x2");
		sb.Append("\x2UV\x5\x1D\xF\x2V\x1A\x3\x2\x2\x2WX\a/\x2\x2XY\x5\x1D\xF\x2");
		sb.Append("Y\x1C\x3\x2\x2\x2Z_\t\x5\x2\x2[\\\a.\x2\x2\\_\a\"\x2\x2]_\t");
		sb.Append("\x6\x2\x2^Z\x3\x2\x2\x2^[\x3\x2\x2\x2^]\x3\x2\x2\x2_`\x3\x2");
		sb.Append("\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x1E\x3\x2\x2\x2\x62");
		sb.Append("g\a<\x2\x2\x63h\t\a\x2\x2\x64\x65\a.\x2\x2\x65h\a\"\x2\x2\x66");
		sb.Append("h\a@\x2\x2g\x63\x3\x2\x2\x2g\x64\x3\x2\x2\x2g\x66\x3\x2\x2\x2");
		sb.Append("hi\x3\x2\x2\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2j \x3\x2\x2\x2kl\t");
		sb.Append("\b\x2\x2l\"\x3\x2\x2\x2mn\a\x31\x2\x2no\a\x31\x2\x2os\x3\x2");
		sb.Append("\x2\x2pr\n\t\x2\x2qp\x3\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2");
		sb.Append("st\x3\x2\x2\x2t$\x3\x2\x2\x2us\x3\x2\x2\x2vy\x5!\x11\x2wy\x5");
		sb.Append("#\x12\x2xv\x3\x2\x2\x2xw\x3\x2\x2\x2yz\x3\x2\x2\x2z{\b\x13\x2");
		sb.Append("\x2{&\x3\x2\x2\x2\xF\x2<\x42\x44JOR^`gisx\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DotNetLisp.Antlr.Generated
