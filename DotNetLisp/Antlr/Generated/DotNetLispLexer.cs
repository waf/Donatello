//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DotNetLisp.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DotNetLisp.Antlr.Generated {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class DotNetLispLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, STRING=8, LONG=9, 
		SYMBOL=10, TYPE=11, TRASH=12;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "STRING", "LONG", 
		"SYMBOL", "TYPE", "WS", "COMMENT", "TRASH"
	};


	public DotNetLispLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", "'|'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "STRING", "LONG", "SYMBOL", 
		"TYPE", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DotNetLisp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\xE");
		sb.Append("`\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3");
		sb.Append("\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3");
		sb.Append("\t\x3\t\a\t\x32\n\t\f\t\xE\t\x35\v\t\x3\t\x3\t\x3\n\x5\n:\n");
		sb.Append("\n\x3\n\x6\n=\n\n\r\n\xE\n>\x3\n\x5\n\x42\n\n\x3\v\x6\v\x45");
		sb.Append("\n\v\r\v\xE\v\x46\x3\f\x3\f\x3\f\x3\f\x3\f\x6\fN\n\f\r\f\xE");
		sb.Append("\fO\x3\r\x3\r\x3\xE\x3\xE\a\xEV\n\xE\f\xE\xE\xEY\v\xE\x3\xF");
		sb.Append("\x3\xF\x5\xF]\n\xF\x3\xF\x3\xF\x2\x2\x10\x3\x3\x5\x4\a\x5\t");
		sb.Append("\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\x2\x1B\x2\x1D\xE");
		sb.Append("\x3\x2\t\x3\x2$$\x3\x2\x32;\x4\x2NNnn\a\x2,-\x30\x30\x32;\x43");
		sb.Append("\\\x63|\x6\x2..>>\x43\\\x63|\a\x2\v\f\xF\xF\"\"..^^\x4\x2\f");
		sb.Append("\f\xF\xFh\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2");
		sb.Append("\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF");
		sb.Append("\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3");
		sb.Append("\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x3\x1F\x3\x2");
		sb.Append("\x2\x2\x5!\x3\x2\x2\x2\a#\x3\x2\x2\x2\t%\x3\x2\x2\x2\v\'\x3");
		sb.Append("\x2\x2\x2\r)\x3\x2\x2\x2\xF+\x3\x2\x2\x2\x11-\x3\x2\x2\x2\x13");
		sb.Append("\x39\x3\x2\x2\x2\x15\x44\x3\x2\x2\x2\x17H\x3\x2\x2\x2\x19Q\x3");
		sb.Append("\x2\x2\x2\x1BS\x3\x2\x2\x2\x1D\\\x3\x2\x2\x2\x1F \a*\x2\x2 ");
		sb.Append("\x4\x3\x2\x2\x2!\"\a+\x2\x2\"\x6\x3\x2\x2\x2#$\a}\x2\x2$\b\x3");
		sb.Append("\x2\x2\x2%&\a\x7F\x2\x2&\n\x3\x2\x2\x2\'(\a~\x2\x2(\f\x3\x2");
		sb.Append("\x2\x2)*\a]\x2\x2*\xE\x3\x2\x2\x2+,\a_\x2\x2,\x10\x3\x2\x2\x2");
		sb.Append("-\x33\a$\x2\x2.\x32\n\x2\x2\x2/\x30\a^\x2\x2\x30\x32\a$\x2\x2");
		sb.Append("\x31.\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x35\x3\x2\x2\x2\x33\x31");
		sb.Append("\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\x36\x3\x2\x2\x2\x35\x33");
		sb.Append("\x3\x2\x2\x2\x36\x37\a$\x2\x2\x37\x12\x3\x2\x2\x2\x38:\a/\x2");
		sb.Append("\x2\x39\x38\x3\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;=\t\x3");
		sb.Append("\x2\x2<;\x3\x2\x2\x2=>\x3\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2");
		sb.Append("\x2?\x41\x3\x2\x2\x2@\x42\t\x4\x2\x2\x41@\x3\x2\x2\x2\x41\x42");
		sb.Append("\x3\x2\x2\x2\x42\x14\x3\x2\x2\x2\x43\x45\t\x5\x2\x2\x44\x43");
		sb.Append("\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3");
		sb.Append("\x2\x2\x2G\x16\x3\x2\x2\x2HM\a<\x2\x2IN\t\x6\x2\x2JK\a.\x2\x2");
		sb.Append("KN\a\"\x2\x2LN\a@\x2\x2MI\x3\x2\x2\x2MJ\x3\x2\x2\x2ML\x3\x2");
		sb.Append("\x2\x2NO\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2P\x18\x3\x2");
		sb.Append("\x2\x2QR\t\a\x2\x2R\x1A\x3\x2\x2\x2SW\a=\x2\x2TV\n\b\x2\x2U");
		sb.Append("T\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2X\x1C");
		sb.Append("\x3\x2\x2\x2YW\x3\x2\x2\x2Z]\x5\x19\r\x2[]\x5\x1B\xE\x2\\Z\x3");
		sb.Append("\x2\x2\x2\\[\x3\x2\x2\x2]^\x3\x2\x2\x2^_\b\xF\x2\x2_\x1E\x3");
		sb.Append("\x2\x2\x2\r\x2\x31\x33\x39>\x41\x46MOW\\\x3\x2\x3\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DotNetLisp.Antlr.Generated
